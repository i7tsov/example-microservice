package server

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/i7tsov/example-microservice/pkg/model"
	"github.com/sirupsen/logrus"
)

// POST /v1/users endpoint.
func (s *Server) createUser(c *gin.Context) {
	var user model.User
	err := c.BindJSON(&user)
	if err != nil {
		logrus.Warnf("Create user failed to bind payload: %v", err)
		c.JSON(http.StatusBadRequest, model.ReasonResponse{Reason: "Invalid payload"})
		return
	}

	// Erase user ID in case it is provided: ID of the new user will be generated by the database.
	user.ID = ""

	id, err := s.d.UsersRepo.AddUser(c, user)
	if err != nil {
		logrus.Errorf("AddUser failed: %v", err)
		c.JSON(http.StatusInternalServerError, internalError)
		return
	}

	c.JSON(http.StatusCreated, model.IDResponse{ID: id})
}

// GET /v1/users endpoint.
func (s *Server) listUsers(c *gin.Context) {
	users, err := s.d.UsersRepo.ListUsers(c)
	if err != nil {
		logrus.Errorf("ListUsers failed: %v", err)
		c.JSON(http.StatusInternalServerError, internalError)
		return
	}

	c.JSON(http.StatusOK, model.ListUsersResponse{
		Users: users,
	})
}
